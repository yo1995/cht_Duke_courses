Your final programming assignment is the "mini project."
For this assignment, you have may choose from two different
options.  You only need to choose ONE of these options (do
NOT  do all of them).  Each mini-project option has
115% possible on it, divided among 4 steps as follows:

Step 1: 50%
Step 2: 30%
Step 3: 20%
Step 4: 15%

This mini-project is due at NOON eastern time on Sunday December 3rd, giving you just
over 3 weeks to work on it.  


For any of these options, you may need to consult other materials
for relevant domain knowledge.  However, you should have obtained the
programming skills to complete the project in this course.  

Your mini-project options are:

 (1) A command shell
     You will need to consult man pages about system calls to do this.
     This option is great preparation if you plan to take 650.
 (2) Numerical methods
     You will need some mathematical knowledge to do this.
     You will also need to perform simple parsing, however, you
     can use the code I gave you in 081 to show you how to do so.
     This option is great preparation if you plan to take 681.


I expect these to be polished, well tested pieces of code.

For this project, YOU will tell ME how to test your code.  You MUST
include a file called TESTING.txt.
In this file, you should give me step-by-step instructions to see that
your code follows the  specifications of the README.  For example, you
might say

(1) Run ./myprogram < testcases/input1.txt
    You will see that it prints xyz, which is correct because [reasons]
(2) Run ./myprogram < testcases/input2.txt
    You will see that it prints xyz, which is correct because [reasons]

If I am satisfied that your testcases are sufficient, I will not make any more
of my own, and you will receive full credit for adequate testing.  If I am
not satisfied with your testcases, I will add more testcases of my own,
and you will lose points for test coverage.

We do not usually grade you on code quality, however, on this assignment we will.
We expect your code to 
  - Be adequately commented
  - Make good use of abstraction (both in terms of functions and classes)
  - Be well-formatted and easy to read
  - Use good variable names.   If I see a variable called "flag" (or anything
    like that), I guarantee you will lose points here.

As always, you should perform good error checking, and valgrind cleanly.




