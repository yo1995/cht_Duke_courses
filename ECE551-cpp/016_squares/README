 1. Open the file "squares.c". Inside this file,
    you will find that I have already done steps 1--4
    for an algorithm which draws two (possibly overlapping)
    squares (one of #s and one of *s). 

 2. Read the generalized steps that I have written as comments
    in this file.  Note that whenever I indicate a range
    (count from x to y, or between x and y), the range is 
    inclusive of the lower bound, and exclusive of the upper bound.
    All counting is "count up by one."  Determine if there are
    any parts of these steps that you will want to abstract
    out into a separate function.

 3. Implement this algorithm by translating my steps into code.
    You may abstract any pieces you want out into separate functions.
    If you do so, write these new functions above the "squares" function
    when you finish translating it.

 4. Find a partner who has also reached this point.
    Swap code with your partner, and scrutinize each other's code for syntax
    errors (things that are not how you learned to write them in chapter 2 of
    AoP), or incorrect translations of the algorithm to code.  Help
    each your partner fix his/her code.    As you work through this, you
    are encouraged to ask each other questions (why did you write this
    for this step?).

    Note that this excercise is not only intended to help you and your
    partner correct errors in the code you wrote, but is also an important
    skill in itself: in a professional context, engineers often conduct
    code reviews of peer's code. 

    We have again provided a "test.sh" script to check the syntax of your code.
    Once you and your partner think it is correct, run ./test.sh and see what
    it says.  If you encounter problems, fix them, possibly with advice from your
    partner.

 5. Submit your modified squares.c file.



