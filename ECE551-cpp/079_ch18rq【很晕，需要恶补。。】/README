As always, read and understand Chapter 18, then answer these questions
in "answers.txt".

1. What does "protected" mean? C

A. It means the same as "private".
B. It means the same as "private", except that classes/methods declared
   as "friend" are prohibited from accessing protected members.
C. It means that the class and its children may access the members, but
   nothing else (except friends).
D. It means that the class and its parent class may access the members,
   but nothing else (except friends).

2. Suppose you have

   class Animal {...};
   class Cat : public Animal {...};

   Animal * a = new Animal();
   Cat * c = new Cat();

Now, consider the following statements:

    1.  Animal * w = c;
    2.  Cat    * x = a;
    3.  Animal   y = *c;
    4.  Cat      z = *a;

Which of the above statement(s) does subtype polymorphism permit in C++? A不确定

A. Only 1
B. Only 2
C. Only 3
D. Only 4
E. 1 and 2
F. 1 and 3
G. 1 and 4
H. 2 and 3
I. 2 and 4
J. 3 and 4

3. With the Cat and Animal classes from the last problem, and Cat * c = new Cat();
   If you were to do
     delete c;
   which destructors would be run, in what order? E

A. No destructors would happen, since Cat is POD.
B. No destructors would happen, since Cat is not-POD.
C. Cat's destructor (only).
D. Animals's destructor (only)
E. Cat's destructor, then Animal's destructor.
F. Animal's destructor, then Cat's destructor.
G. None of the above

4. What does "dynamic dispatch" mean? A 不确定

A. Which method is called is determined by the actual (runtime) type
   of the object on which the method is invoked.
B. Which method is called is determined by the static (compile time)  type
   of the object on which the method is invoked.
C. Which method is called is determined by the dynamic trends in dispatch
   rates.
D. None of the above.

5. What does it mean to write  " = 0" at the end of a method declaration? C

A. The method always returns zero.
B. The method will be defined in a template, which is written later.
C. The method is abstract (aka pure virtual).
D. None of the above.

6. Which of the following is a good guideline when designing your 
   inheritance hierarchy? B

A. Separate each method out into its own class.
B. Push common members as far up the hierarchy as possible.
C. Avoid writing abstract classes.
D. Do not use dynamic dispatch unless you absolutely must.

7. What does "virtual" mean in a method declaration? C

A. The method is not real, but is just a place holder.
B. The method does not have effects on state outside of its own class.
C. The method will be dynamically dispatched in this class and its children.
D. None of the above.


8. Which of these is a common tool that software engineers use to describe the
   design of their classes? D

A. XML inheritance trees.
B. HTML class refinements.
C. CDML hierarchies.
D. UML diagrams.


9. In C++, if you need a child class to pass parameters to its parent 
   class's constructor, how do you do so B - C 这块不太懂。。。在书上的哪里

A. You cannot, it must use the default constructor.
B. When it declares that it inherits from its parent class
   (i.e., class X: public Y), you put parenthesis and the constructor
   arguments right after the parent class name there.
C. You write the parent class name, with the parameters in parenthesis
   in the first position of the initializer list.
D. You call super() and pass paremetsr to it as the first line of hte constructor.

10. Abstract classes cannot be instantiated, however, they are quite useful.
    Which other language features make them so useful? B

A. Templates and iterators.
B. Subtype polymorphism and dynamic dispatch.
C. Operator overloading and references.
D. None of the above.
      
11. What should you always have in any base class which you
    will use with subtype polymorphism? D 不确定 - B

A. An implicit conversion constructor from its child classes.
B. A virtual destructor.
C. An overloaded operator= to convert between pointers and references.
D. A default template parameter.

